
Lab3_4_collab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080027c8  080027c8  000127c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e8  080027e8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080027e8  080027e8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027e8  080027e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080027f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000005c  0800284c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800284c  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000944a  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001feb  00000000  00000000  000294cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0002b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  0002c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017436  00000000  00000000  0002cad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d76e  00000000  00000000  00043f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824da  00000000  00000000  0005167c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3b56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cac  00000000  00000000  000d3ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027b0 	.word	0x080027b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080027b0 	.word	0x080027b0

0800014c <is_SELECT_PRESSED>:

int Timer_for_key_Press1 = 200 ;				//set Timer for nhaans def



int is_SELECT_PRESSED(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(SELECT_FLAG == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_SELECT_PRESSED+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_SELECT_PRESSED+0x16>
		SELECT_FLAG = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_SELECT_PRESSED+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_SELECT_PRESSED+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000078 	.word	0x20000078

08000170 <sub_for_Process>:


void sub_for_Process(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	SELECT_FLAG = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <sub_for_Process+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000078 	.word	0x20000078

08000188 <get_key_Input>:

void get_key_Input(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	keyReg0_SELECT = keyReg1_SELECT;
 800018c:	4b22      	ldr	r3, [pc, #136]	; (8000218 <get_key_Input+0x90>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a22      	ldr	r2, [pc, #136]	; (800021c <get_key_Input+0x94>)
 8000192:	6013      	str	r3, [r2, #0]
	keyReg1_SELECT = keyReg2_SELECT;
 8000194:	4b22      	ldr	r3, [pc, #136]	; (8000220 <get_key_Input+0x98>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a1f      	ldr	r2, [pc, #124]	; (8000218 <get_key_Input+0x90>)
 800019a:	6013      	str	r3, [r2, #0]
	keyReg2_SELECT = HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	4820      	ldr	r0, [pc, #128]	; (8000224 <get_key_Input+0x9c>)
 80001a2:	f001 fac5 	bl	8001730 <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b1d      	ldr	r3, [pc, #116]	; (8000220 <get_key_Input+0x98>)
 80001ac:	601a      	str	r2, [r3, #0]
	if(keyReg0_SELECT == keyReg1_SELECT && keyReg1_SELECT == keyReg2_SELECT){
 80001ae:	4b1b      	ldr	r3, [pc, #108]	; (800021c <get_key_Input+0x94>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b19      	ldr	r3, [pc, #100]	; (8000218 <get_key_Input+0x90>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d12b      	bne.n	8000212 <get_key_Input+0x8a>
 80001ba:	4b17      	ldr	r3, [pc, #92]	; (8000218 <get_key_Input+0x90>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b18      	ldr	r3, [pc, #96]	; (8000220 <get_key_Input+0x98>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d125      	bne.n	8000212 <get_key_Input+0x8a>
		if(keyReg3_SELECT != keyReg2_SELECT){
 80001c6:	4b18      	ldr	r3, [pc, #96]	; (8000228 <get_key_Input+0xa0>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b15      	ldr	r3, [pc, #84]	; (8000220 <get_key_Input+0x98>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d00d      	beq.n	80001ee <get_key_Input+0x66>
			keyReg3_SELECT = keyReg2_SELECT;
 80001d2:	4b13      	ldr	r3, [pc, #76]	; (8000220 <get_key_Input+0x98>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a14      	ldr	r2, [pc, #80]	; (8000228 <get_key_Input+0xa0>)
 80001d8:	6013      	str	r3, [r2, #0]
			if(keyReg2_SELECT == PRESSED_STATE){					//Nhaans tha?
 80001da:	4b11      	ldr	r3, [pc, #68]	; (8000220 <get_key_Input+0x98>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d117      	bne.n	8000212 <get_key_Input+0x8a>
				//TOdo for press 1 time
				sub_for_Process();
 80001e2:	f7ff ffc5 	bl	8000170 <sub_for_Process>
				Timer_for_key_Press1 = 200;
 80001e6:	4b11      	ldr	r3, [pc, #68]	; (800022c <get_key_Input+0xa4>)
 80001e8:	22c8      	movs	r2, #200	; 0xc8
 80001ea:	601a      	str	r2, [r3, #0]
				}
				Timer_for_key_Press1 = 200;
			}
			}
		}
	}
 80001ec:	e011      	b.n	8000212 <get_key_Input+0x8a>
			Timer_for_key_Press1--;
 80001ee:	4b0f      	ldr	r3, [pc, #60]	; (800022c <get_key_Input+0xa4>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <get_key_Input+0xa4>)
 80001f6:	6013      	str	r3, [r2, #0]
			if(Timer_for_key_Press1 == 0){
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <get_key_Input+0xa4>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d108      	bne.n	8000212 <get_key_Input+0x8a>
				if(keyReg2_SELECT == PRESSED_STATE){
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <get_key_Input+0x98>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d101      	bne.n	800020c <get_key_Input+0x84>
					sub_for_Process();
 8000208:	f7ff ffb2 	bl	8000170 <sub_for_Process>
				Timer_for_key_Press1 = 200;
 800020c:	4b07      	ldr	r3, [pc, #28]	; (800022c <get_key_Input+0xa4>)
 800020e:	22c8      	movs	r2, #200	; 0xc8
 8000210:	601a      	str	r2, [r3, #0]
	}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000004 	.word	0x20000004
 800021c:	20000000 	.word	0x20000000
 8000220:	20000008 	.word	0x20000008
 8000224:	40010c00 	.word	0x40010c00
 8000228:	2000000c 	.word	0x2000000c
 800022c:	20000010 	.word	0x20000010

08000230 <sub_for_Process2>:


int Timer_for_key_Press2 = 200 ;				//set Timer for nhaans def


void sub_for_Process2(){
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	MODIFY_FLAG = 1;
 8000234:	4b03      	ldr	r3, [pc, #12]	; (8000244 <sub_for_Process2+0x14>)
 8000236:	2201      	movs	r2, #1
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	2000007c 	.word	0x2000007c

08000248 <is_MODIFY_PRESSED>:

int is_MODIFY_PRESSED(){
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	if(MODIFY_FLAG == 1){
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <is_MODIFY_PRESSED+0x20>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d104      	bne.n	800025e <is_MODIFY_PRESSED+0x16>
		MODIFY_FLAG = 0;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <is_MODIFY_PRESSED+0x20>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
		return 1;
 800025a:	2301      	movs	r3, #1
 800025c:	e000      	b.n	8000260 <is_MODIFY_PRESSED+0x18>
	}
	return 0;
 800025e:	2300      	movs	r3, #0
}
 8000260:	4618      	mov	r0, r3
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	2000007c 	.word	0x2000007c

0800026c <get_key_Input2>:


void get_key_Input2(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	keyReg0_MODIFY = keyReg1_MODIFY;
 8000270:	4b22      	ldr	r3, [pc, #136]	; (80002fc <get_key_Input2+0x90>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a22      	ldr	r2, [pc, #136]	; (8000300 <get_key_Input2+0x94>)
 8000276:	6013      	str	r3, [r2, #0]
	keyReg1_MODIFY = keyReg2_MODIFY;
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <get_key_Input2+0x98>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1f      	ldr	r2, [pc, #124]	; (80002fc <get_key_Input2+0x90>)
 800027e:	6013      	str	r3, [r2, #0]
	keyReg2_MODIFY = HAL_GPIO_ReadPin(MODIFY_GPIO_Port, MODIFY_Pin);
 8000280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000284:	4820      	ldr	r0, [pc, #128]	; (8000308 <get_key_Input2+0x9c>)
 8000286:	f001 fa53 	bl	8001730 <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <get_key_Input2+0x98>)
 8000290:	601a      	str	r2, [r3, #0]
	if(keyReg0_MODIFY == keyReg1_MODIFY && keyReg1_MODIFY == keyReg2_MODIFY){
 8000292:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <get_key_Input2+0x94>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b19      	ldr	r3, [pc, #100]	; (80002fc <get_key_Input2+0x90>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	429a      	cmp	r2, r3
 800029c:	d12b      	bne.n	80002f6 <get_key_Input2+0x8a>
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <get_key_Input2+0x90>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b18      	ldr	r3, [pc, #96]	; (8000304 <get_key_Input2+0x98>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d125      	bne.n	80002f6 <get_key_Input2+0x8a>
		if(keyReg3_MODIFY != keyReg2_MODIFY){
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <get_key_Input2+0xa0>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <get_key_Input2+0x98>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d00d      	beq.n	80002d2 <get_key_Input2+0x66>
			keyReg3_MODIFY = keyReg2_MODIFY;
 80002b6:	4b13      	ldr	r3, [pc, #76]	; (8000304 <get_key_Input2+0x98>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a14      	ldr	r2, [pc, #80]	; (800030c <get_key_Input2+0xa0>)
 80002bc:	6013      	str	r3, [r2, #0]
			if(keyReg2_MODIFY == PRESSED_STATE){					//Nhaans tha?
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <get_key_Input2+0x98>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d117      	bne.n	80002f6 <get_key_Input2+0x8a>
				//TOdo for press 1 time
				sub_for_Process2();
 80002c6:	f7ff ffb3 	bl	8000230 <sub_for_Process2>
				Timer_for_key_Press2 = 200;
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <get_key_Input2+0xa4>)
 80002cc:	22c8      	movs	r2, #200	; 0xc8
 80002ce:	601a      	str	r2, [r3, #0]
				}
				Timer_for_key_Press2 = 200;
			}
			}
		}
	}
 80002d0:	e011      	b.n	80002f6 <get_key_Input2+0x8a>
			Timer_for_key_Press2--;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <get_key_Input2+0xa4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <get_key_Input2+0xa4>)
 80002da:	6013      	str	r3, [r2, #0]
			if(Timer_for_key_Press2 == 0){
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <get_key_Input2+0xa4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d108      	bne.n	80002f6 <get_key_Input2+0x8a>
				if(keyReg2_MODIFY == PRESSED_STATE){
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <get_key_Input2+0x98>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d101      	bne.n	80002f0 <get_key_Input2+0x84>
					sub_for_Process2();
 80002ec:	f7ff ffa0 	bl	8000230 <sub_for_Process2>
				Timer_for_key_Press2 = 200;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <get_key_Input2+0xa4>)
 80002f2:	22c8      	movs	r2, #200	; 0xc8
 80002f4:	601a      	str	r2, [r3, #0]
	}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000018 	.word	0x20000018
 8000300:	20000014 	.word	0x20000014
 8000304:	2000001c 	.word	0x2000001c
 8000308:	40010c00 	.word	0x40010c00
 800030c:	20000020 	.word	0x20000020
 8000310:	20000024 	.word	0x20000024

08000314 <sub_for_Process3>:


int Timer_for_key_Press3 = 200 ;				//set Timer for nhaans def


void sub_for_Process3(){
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	SET_FLAG = 1;
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <sub_for_Process3+0x14>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000080 	.word	0x20000080

0800032c <is_SET_PRESSED>:
int is_SET_PRESSED(){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	if(SET_FLAG == 1){
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <is_SET_PRESSED+0x20>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d104      	bne.n	8000342 <is_SET_PRESSED+0x16>
		SET_FLAG = 0;
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <is_SET_PRESSED+0x20>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
		return 1;
 800033e:	2301      	movs	r3, #1
 8000340:	e000      	b.n	8000344 <is_SET_PRESSED+0x18>
	}
	return 0;
 8000342:	2300      	movs	r3, #0
}
 8000344:	4618      	mov	r0, r3
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	20000080 	.word	0x20000080

08000350 <get_key_Input3>:

void get_key_Input3(){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	keyReg0_SET = keyReg1_SET;
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <get_key_Input3+0x90>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <get_key_Input3+0x94>)
 800035a:	6013      	str	r3, [r2, #0]
	keyReg1_SET = keyReg2_SET;
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <get_key_Input3+0x98>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1f      	ldr	r2, [pc, #124]	; (80003e0 <get_key_Input3+0x90>)
 8000362:	6013      	str	r3, [r2, #0]
	keyReg2_SET = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 8000364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000368:	4820      	ldr	r0, [pc, #128]	; (80003ec <get_key_Input3+0x9c>)
 800036a:	f001 f9e1 	bl	8001730 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <get_key_Input3+0x98>)
 8000374:	601a      	str	r2, [r3, #0]
	if(keyReg0_SET == keyReg1_SET && keyReg1_SET == keyReg2_SET){
 8000376:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <get_key_Input3+0x94>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <get_key_Input3+0x90>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d12b      	bne.n	80003da <get_key_Input3+0x8a>
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <get_key_Input3+0x90>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <get_key_Input3+0x98>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	d125      	bne.n	80003da <get_key_Input3+0x8a>
		if(keyReg3_SET != keyReg2_SET){
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <get_key_Input3+0xa0>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <get_key_Input3+0x98>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	429a      	cmp	r2, r3
 8000398:	d00d      	beq.n	80003b6 <get_key_Input3+0x66>
			keyReg3_SET = keyReg2_SET;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <get_key_Input3+0x98>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <get_key_Input3+0xa0>)
 80003a0:	6013      	str	r3, [r2, #0]
			if(keyReg2_SET == PRESSED_STATE){					//Nhaans tha?
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <get_key_Input3+0x98>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d117      	bne.n	80003da <get_key_Input3+0x8a>
				//TOdo for press 1 time
				sub_for_Process3();
 80003aa:	f7ff ffb3 	bl	8000314 <sub_for_Process3>
				Timer_for_key_Press3 = 200;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <get_key_Input3+0xa4>)
 80003b0:	22c8      	movs	r2, #200	; 0xc8
 80003b2:	601a      	str	r2, [r3, #0]
				}
				Timer_for_key_Press3 = 200;
			}
			}
		}
	}
 80003b4:	e011      	b.n	80003da <get_key_Input3+0x8a>
			Timer_for_key_Press3--;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <get_key_Input3+0xa4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <get_key_Input3+0xa4>)
 80003be:	6013      	str	r3, [r2, #0]
			if(Timer_for_key_Press3 == 0){
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <get_key_Input3+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d108      	bne.n	80003da <get_key_Input3+0x8a>
				if(keyReg2_SET == PRESSED_STATE){
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <get_key_Input3+0x98>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <get_key_Input3+0x84>
					sub_for_Process3();
 80003d0:	f7ff ffa0 	bl	8000314 <sub_for_Process3>
				Timer_for_key_Press3 = 200;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <get_key_Input3+0xa4>)
 80003d6:	22c8      	movs	r2, #200	; 0xc8
 80003d8:	601a      	str	r2, [r3, #0]
	}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000002c 	.word	0x2000002c
 80003e4:	20000028 	.word	0x20000028
 80003e8:	20000030 	.word	0x20000030
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	20000034 	.word	0x20000034
 80003f4:	20000038 	.word	0x20000038

080003f8 <blink_RED>:
#include "software_timer.h"
#include "seg7_display.h"
#include "fsm_machine.h"


void blink_RED(){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	if(RED_BLINK_flag == 1){
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <blink_RED+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d10b      	bne.n	800041c <blink_RED+0x24>
		setTimer_for_RED_blink(25);
 8000404:	2019      	movs	r0, #25
 8000406:	f000 fd23 	bl	8000e50 <setTimer_for_RED_blink>
		HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 800040a:	2102      	movs	r1, #2
 800040c:	4805      	ldr	r0, [pc, #20]	; (8000424 <blink_RED+0x2c>)
 800040e:	f001 f9be 	bl	800178e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8000412:	2104      	movs	r1, #4
 8000414:	4803      	ldr	r0, [pc, #12]	; (8000424 <blink_RED+0x2c>)
 8000416:	f001 f9ba 	bl	800178e <HAL_GPIO_TogglePin>
	}
	return;
 800041a:	bf00      	nop
 800041c:	bf00      	nop
}
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000470 	.word	0x20000470
 8000424:	40010800 	.word	0x40010800

08000428 <blink_YELLOW>:
void blink_YELLOW(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	if(YELLOW_BLINK_flag == 1){
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <blink_YELLOW+0x28>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d10b      	bne.n	800044c <blink_YELLOW+0x24>
		setTimer_for_YELLOW_blink(25);
 8000434:	2019      	movs	r0, #25
 8000436:	f000 fd33 	bl	8000ea0 <setTimer_for_YELLOW_blink>
		HAL_GPIO_TogglePin(PURPLE1_GPIO_Port, PURPLE1_Pin);
 800043a:	2120      	movs	r1, #32
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <blink_YELLOW+0x2c>)
 800043e:	f001 f9a6 	bl	800178e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PURPLE2_GPIO_Port, PURPLE2_Pin);
 8000442:	2140      	movs	r1, #64	; 0x40
 8000444:	4803      	ldr	r0, [pc, #12]	; (8000454 <blink_YELLOW+0x2c>)
 8000446:	f001 f9a2 	bl	800178e <HAL_GPIO_TogglePin>
	}
	return;
 800044a:	bf00      	nop
 800044c:	bf00      	nop
}
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000480 	.word	0x20000480
 8000454:	40010800 	.word	0x40010800

08000458 <blink_GREEN>:
void blink_GREEN(){
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	if(GREEN_BLINK_flag == 1){
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <blink_GREEN+0x2c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d10d      	bne.n	8000480 <blink_GREEN+0x28>
		setTimer_for_GREEN_blink(25);
 8000464:	2019      	movs	r0, #25
 8000466:	f000 fd07 	bl	8000e78 <setTimer_for_GREEN_blink>
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 800046a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <blink_GREEN+0x30>)
 8000470:	f001 f98d 	bl	800178e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8000474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000478:	4803      	ldr	r0, [pc, #12]	; (8000488 <blink_GREEN+0x30>)
 800047a:	f001 f988 	bl	800178e <HAL_GPIO_TogglePin>
	}
	return;
 800047e:	bf00      	nop
 8000480:	bf00      	nop
}
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000478 	.word	0x20000478
 8000488:	40010800 	.word	0x40010800

0800048c <updateClockBuffer>:


void updateClockBuffer(void){
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
	seg_index1 = time_for_Traffic1/10;
 8000490:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <updateClockBuffer+0x70>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a1a      	ldr	r2, [pc, #104]	; (8000500 <updateClockBuffer+0x74>)
 8000496:	fb82 1203 	smull	r1, r2, r2, r3
 800049a:	1092      	asrs	r2, r2, #2
 800049c:	17db      	asrs	r3, r3, #31
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	4a18      	ldr	r2, [pc, #96]	; (8000504 <updateClockBuffer+0x78>)
 80004a2:	6013      	str	r3, [r2, #0]
	seg_index3 = time_for_Traffic2/10;
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <updateClockBuffer+0x7c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a15      	ldr	r2, [pc, #84]	; (8000500 <updateClockBuffer+0x74>)
 80004aa:	fb82 1203 	smull	r1, r2, r2, r3
 80004ae:	1092      	asrs	r2, r2, #2
 80004b0:	17db      	asrs	r3, r3, #31
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	4a15      	ldr	r2, [pc, #84]	; (800050c <updateClockBuffer+0x80>)
 80004b6:	6013      	str	r3, [r2, #0]
	seg_index2 = time_for_Traffic1%10;
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <updateClockBuffer+0x70>)
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <updateClockBuffer+0x74>)
 80004be:	fb83 2301 	smull	r2, r3, r3, r1
 80004c2:	109a      	asrs	r2, r3, #2
 80004c4:	17cb      	asrs	r3, r1, #31
 80004c6:	1ad2      	subs	r2, r2, r3
 80004c8:	4613      	mov	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	1aca      	subs	r2, r1, r3
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <updateClockBuffer+0x84>)
 80004d4:	601a      	str	r2, [r3, #0]
	seg_index4 = time_for_Traffic2%10;
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <updateClockBuffer+0x7c>)
 80004d8:	6819      	ldr	r1, [r3, #0]
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <updateClockBuffer+0x74>)
 80004dc:	fb83 2301 	smull	r2, r3, r3, r1
 80004e0:	109a      	asrs	r2, r3, #2
 80004e2:	17cb      	asrs	r3, r1, #31
 80004e4:	1ad2      	subs	r2, r2, r3
 80004e6:	4613      	mov	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	4413      	add	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	1aca      	subs	r2, r1, r3
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <updateClockBuffer+0x88>)
 80004f2:	601a      	str	r2, [r3, #0]
	return;
 80004f4:	bf00      	nop
}
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	20000084 	.word	0x20000084
 8000500:	66666667 	.word	0x66666667
 8000504:	20000444 	.word	0x20000444
 8000508:	20000088 	.word	0x20000088
 800050c:	2000044c 	.word	0x2000044c
 8000510:	20000448 	.word	0x20000448
 8000514:	20000450 	.word	0x20000450

08000518 <TRAFFIC_NORMAL1>:
//int seg_index1 = 5;
//int seg_index2 = 3;
//int seg = 0;


void TRAFFIC_NORMAL1(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	switch(status_traffic1){
 800051c:	4b49      	ldr	r3, [pc, #292]	; (8000644 <TRAFFIC_NORMAL1+0x12c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b03      	cmp	r3, #3
 8000522:	d05b      	beq.n	80005dc <TRAFFIC_NORMAL1+0xc4>
 8000524:	2b03      	cmp	r3, #3
 8000526:	f300 8083 	bgt.w	8000630 <TRAFFIC_NORMAL1+0x118>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d002      	beq.n	8000534 <TRAFFIC_NORMAL1+0x1c>
 800052e:	2b02      	cmp	r3, #2
 8000530:	d02a      	beq.n	8000588 <TRAFFIC_NORMAL1+0x70>
					time_for_Traffic1 = seg_buffer1[0];
				}
		}
		break;
	default:
		break;
 8000532:	e07d      	b.n	8000630 <TRAFFIC_NORMAL1+0x118>
		updateClockBuffer();
 8000534:	f7ff ffaa 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2102      	movs	r1, #2
 800053c:	4842      	ldr	r0, [pc, #264]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 800053e:	f001 f90e 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000548:	483f      	ldr	r0, [pc, #252]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 800054a:	f001 f908 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE1_GPIO_Port, PURPLE1_Pin, SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2120      	movs	r1, #32
 8000552:	483d      	ldr	r0, [pc, #244]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 8000554:	f001 f903 	bl	800175e <HAL_GPIO_WritePin>
		if(timer_flag1 == 1){
 8000558:	4b3c      	ldr	r3, [pc, #240]	; (800064c <TRAFFIC_NORMAL1+0x134>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d169      	bne.n	8000634 <TRAFFIC_NORMAL1+0x11c>
			setTimer1(100);      //red
 8000560:	2064      	movs	r0, #100	; 0x64
 8000562:	f000 fc4d 	bl	8000e00 <setTimer1>
			time_for_Traffic1--;
 8000566:	4b3a      	ldr	r3, [pc, #232]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	4a38      	ldr	r2, [pc, #224]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 800056e:	6013      	str	r3, [r2, #0]
			if(time_for_Traffic1 == 0){
 8000570:	4b37      	ldr	r3, [pc, #220]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d15d      	bne.n	8000634 <TRAFFIC_NORMAL1+0x11c>
				status_traffic1 = 2;
 8000578:	4b32      	ldr	r3, [pc, #200]	; (8000644 <TRAFFIC_NORMAL1+0x12c>)
 800057a:	2202      	movs	r2, #2
 800057c:	601a      	str	r2, [r3, #0]
				time_for_Traffic1 = seg_buffer1[1];
 800057e:	4b35      	ldr	r3, [pc, #212]	; (8000654 <TRAFFIC_NORMAL1+0x13c>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	4a33      	ldr	r2, [pc, #204]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 8000584:	6013      	str	r3, [r2, #0]
		break;
 8000586:	e055      	b.n	8000634 <TRAFFIC_NORMAL1+0x11c>
		updateClockBuffer();
 8000588:	f7ff ff80 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2102      	movs	r1, #2
 8000590:	482d      	ldr	r0, [pc, #180]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 8000592:	f001 f8e4 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	482a      	ldr	r0, [pc, #168]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 800059e:	f001 f8de 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE1_GPIO_Port, PURPLE1_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	4828      	ldr	r0, [pc, #160]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 80005a8:	f001 f8d9 	bl	800175e <HAL_GPIO_WritePin>
		if(timer_flag1 == 1){
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <TRAFFIC_NORMAL1+0x134>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d141      	bne.n	8000638 <TRAFFIC_NORMAL1+0x120>
			setTimer1(100);      //green
 80005b4:	2064      	movs	r0, #100	; 0x64
 80005b6:	f000 fc23 	bl	8000e00 <setTimer1>
			time_for_Traffic1--;
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a23      	ldr	r2, [pc, #140]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 80005c2:	6013      	str	r3, [r2, #0]
			if(time_for_Traffic1 == 0){
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d135      	bne.n	8000638 <TRAFFIC_NORMAL1+0x120>
				status_traffic1 = 3;
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <TRAFFIC_NORMAL1+0x12c>)
 80005ce:	2203      	movs	r2, #3
 80005d0:	601a      	str	r2, [r3, #0]
				time_for_Traffic1 = seg_buffer1[2];
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <TRAFFIC_NORMAL1+0x13c>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 80005d8:	6013      	str	r3, [r2, #0]
		break;
 80005da:	e02d      	b.n	8000638 <TRAFFIC_NORMAL1+0x120>
		updateClockBuffer();
 80005dc:	f7ff ff56 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2102      	movs	r1, #2
 80005e4:	4818      	ldr	r0, [pc, #96]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 80005e6:	f001 f8ba 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f0:	4815      	ldr	r0, [pc, #84]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 80005f2:	f001 f8b4 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE1_GPIO_Port, PURPLE1_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	4813      	ldr	r0, [pc, #76]	; (8000648 <TRAFFIC_NORMAL1+0x130>)
 80005fc:	f001 f8af 	bl	800175e <HAL_GPIO_WritePin>
		if(timer_flag1 == 1){
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <TRAFFIC_NORMAL1+0x134>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d119      	bne.n	800063c <TRAFFIC_NORMAL1+0x124>
			setTimer1(100);      //YELLOW
 8000608:	2064      	movs	r0, #100	; 0x64
 800060a:	f000 fbf9 	bl	8000e00 <setTimer1>
				time_for_Traffic1--;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 8000616:	6013      	str	r3, [r2, #0]
				if(time_for_Traffic1 == 0){
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10d      	bne.n	800063c <TRAFFIC_NORMAL1+0x124>
					status_traffic1 = 1;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <TRAFFIC_NORMAL1+0x12c>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
					time_for_Traffic1 = seg_buffer1[0];
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <TRAFFIC_NORMAL1+0x13c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a09      	ldr	r2, [pc, #36]	; (8000650 <TRAFFIC_NORMAL1+0x138>)
 800062c:	6013      	str	r3, [r2, #0]
		break;
 800062e:	e005      	b.n	800063c <TRAFFIC_NORMAL1+0x124>
		break;
 8000630:	bf00      	nop
 8000632:	e004      	b.n	800063e <TRAFFIC_NORMAL1+0x126>
		break;
 8000634:	bf00      	nop
 8000636:	e002      	b.n	800063e <TRAFFIC_NORMAL1+0x126>
		break;
 8000638:	bf00      	nop
 800063a:	e000      	b.n	800063e <TRAFFIC_NORMAL1+0x126>
		break;
 800063c:	bf00      	nop
	}
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000003c 	.word	0x2000003c
 8000648:	40010800 	.word	0x40010800
 800064c:	20000460 	.word	0x20000460
 8000650:	20000084 	.word	0x20000084
 8000654:	20000044 	.word	0x20000044

08000658 <TRAFFIC_NORMAL2>:



void TRAFFIC_NORMAL2(){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	switch(status_traffic2){
 800065c:	4b49      	ldr	r3, [pc, #292]	; (8000784 <TRAFFIC_NORMAL2+0x12c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d05b      	beq.n	800071c <TRAFFIC_NORMAL2+0xc4>
 8000664:	2b03      	cmp	r3, #3
 8000666:	f300 8083 	bgt.w	8000770 <TRAFFIC_NORMAL2+0x118>
 800066a:	2b01      	cmp	r3, #1
 800066c:	d002      	beq.n	8000674 <TRAFFIC_NORMAL2+0x1c>
 800066e:	2b02      	cmp	r3, #2
 8000670:	d02a      	beq.n	80006c8 <TRAFFIC_NORMAL2+0x70>
				status_traffic2 = 1;
			}
		}
		break;
	default:
		break;
 8000672:	e07d      	b.n	8000770 <TRAFFIC_NORMAL2+0x118>
		updateClockBuffer();
 8000674:	f7ff ff0a 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2104      	movs	r1, #4
 800067c:	4842      	ldr	r0, [pc, #264]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 800067e:	f001 f86e 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000688:	483f      	ldr	r0, [pc, #252]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 800068a:	f001 f868 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE2_GPIO_Port, PURPLE2_Pin, SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	483d      	ldr	r0, [pc, #244]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 8000694:	f001 f863 	bl	800175e <HAL_GPIO_WritePin>
		if(timer_flag2 == 1){
 8000698:	4b3c      	ldr	r3, [pc, #240]	; (800078c <TRAFFIC_NORMAL2+0x134>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d169      	bne.n	8000774 <TRAFFIC_NORMAL2+0x11c>
			setTimer2(100);      //green
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f000 fbc1 	bl	8000e28 <setTimer2>
			time_for_Traffic2--;
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 80006ae:	6013      	str	r3, [r2, #0]
			if(time_for_Traffic2 == 0){
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d15d      	bne.n	8000774 <TRAFFIC_NORMAL2+0x11c>
					status_traffic2 = 2;
 80006b8:	4b32      	ldr	r3, [pc, #200]	; (8000784 <TRAFFIC_NORMAL2+0x12c>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	601a      	str	r2, [r3, #0]
					time_for_Traffic2 = seg_buffer1[2];
 80006be:	4b35      	ldr	r3, [pc, #212]	; (8000794 <TRAFFIC_NORMAL2+0x13c>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	4a33      	ldr	r2, [pc, #204]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 80006c4:	6013      	str	r3, [r2, #0]
		break;
 80006c6:	e055      	b.n	8000774 <TRAFFIC_NORMAL2+0x11c>
		updateClockBuffer();
 80006c8:	f7ff fee0 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2104      	movs	r1, #4
 80006d0:	482d      	ldr	r0, [pc, #180]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 80006d2:	f001 f844 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	482a      	ldr	r0, [pc, #168]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 80006de:	f001 f83e 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE2_GPIO_Port, PURPLE2_Pin, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	4828      	ldr	r0, [pc, #160]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 80006e8:	f001 f839 	bl	800175e <HAL_GPIO_WritePin>
		if(timer_flag2 == 1){
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <TRAFFIC_NORMAL2+0x134>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d141      	bne.n	8000778 <TRAFFIC_NORMAL2+0x120>
			setTimer2(100);
 80006f4:	2064      	movs	r0, #100	; 0x64
 80006f6:	f000 fb97 	bl	8000e28 <setTimer2>
			time_for_Traffic2--;
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a23      	ldr	r2, [pc, #140]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000702:	6013      	str	r3, [r2, #0]
			if(time_for_Traffic2 == 0){
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d135      	bne.n	8000778 <TRAFFIC_NORMAL2+0x120>
				time_for_Traffic2 = seg_buffer1[0];
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <TRAFFIC_NORMAL2+0x13c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000712:	6013      	str	r3, [r2, #0]
				status_traffic2 = 3;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <TRAFFIC_NORMAL2+0x12c>)
 8000716:	2203      	movs	r2, #3
 8000718:	601a      	str	r2, [r3, #0]
		break;
 800071a:	e02d      	b.n	8000778 <TRAFFIC_NORMAL2+0x120>
		updateClockBuffer();
 800071c:	f7ff feb6 	bl	800048c <updateClockBuffer>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2104      	movs	r1, #4
 8000724:	4818      	ldr	r0, [pc, #96]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 8000726:	f001 f81a 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000730:	4815      	ldr	r0, [pc, #84]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 8000732:	f001 f814 	bl	800175e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PURPLE2_GPIO_Port, PURPLE2_Pin, SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2140      	movs	r1, #64	; 0x40
 800073a:	4813      	ldr	r0, [pc, #76]	; (8000788 <TRAFFIC_NORMAL2+0x130>)
 800073c:	f001 f80f 	bl	800175e <HAL_GPIO_WritePin>
		if(timer_flag2 == 1){
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <TRAFFIC_NORMAL2+0x134>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d119      	bne.n	800077c <TRAFFIC_NORMAL2+0x124>
			setTimer2(100);
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f000 fb6d 	bl	8000e28 <setTimer2>
			time_for_Traffic2--;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000756:	6013      	str	r3, [r2, #0]
			if(time_for_Traffic2 == 0){
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10d      	bne.n	800077c <TRAFFIC_NORMAL2+0x124>
				time_for_Traffic2 = seg_buffer1[1];
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <TRAFFIC_NORMAL2+0x13c>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <TRAFFIC_NORMAL2+0x138>)
 8000766:	6013      	str	r3, [r2, #0]
				status_traffic2 = 1;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <TRAFFIC_NORMAL2+0x12c>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
		break;
 800076e:	e005      	b.n	800077c <TRAFFIC_NORMAL2+0x124>
		break;
 8000770:	bf00      	nop
 8000772:	e004      	b.n	800077e <TRAFFIC_NORMAL2+0x126>
		break;
 8000774:	bf00      	nop
 8000776:	e002      	b.n	800077e <TRAFFIC_NORMAL2+0x126>
		break;
 8000778:	bf00      	nop
 800077a:	e000      	b.n	800077e <TRAFFIC_NORMAL2+0x126>
		break;
 800077c:	bf00      	nop
	}
	return;
 800077e:	bf00      	nop
}
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000040 	.word	0x20000040
 8000788:	40010800 	.word	0x40010800
 800078c:	20000464 	.word	0x20000464
 8000790:	20000088 	.word	0x20000088
 8000794:	20000044 	.word	0x20000044

08000798 <OFF_ALL_LED2>:

void OFF_ALL_LED2(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	2104      	movs	r1, #4
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <OFF_ALL_LED2+0x28>)
 80007a2:	f000 ffdc 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <OFF_ALL_LED2+0x28>)
 80007ae:	f000 ffd6 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PURPLE2_GPIO_Port, PURPLE2_Pin, 1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2140      	movs	r1, #64	; 0x40
 80007b6:	4802      	ldr	r0, [pc, #8]	; (80007c0 <OFF_ALL_LED2+0x28>)
 80007b8:	f000 ffd1 	bl	800175e <HAL_GPIO_WritePin>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40010800 	.word	0x40010800

080007c4 <OFF_ALL_LED1>:

void OFF_ALL_LED1(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2102      	movs	r1, #2
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <OFF_ALL_LED1+0x28>)
 80007ce:	f000 ffc6 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <OFF_ALL_LED1+0x28>)
 80007da:	f000 ffc0 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PURPLE1_GPIO_Port, PURPLE1_Pin, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	2120      	movs	r1, #32
 80007e2:	4802      	ldr	r0, [pc, #8]	; (80007ec <OFF_ALL_LED1+0x28>)
 80007e4:	f000 ffbb 	bl	800175e <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40010800 	.word	0x40010800

080007f0 <start_SEG7>:
	HAL_GPIO_WritePin(PURPLE1_GPIO_Port, PURPLE1_Pin, 0);
}



void start_SEG7(){
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	 time_for_Traffic1 = seg_buffer1[0];
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <start_SEG7+0x1c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <start_SEG7+0x20>)
 80007fa:	6013      	str	r3, [r2, #0]
	 time_for_Traffic2 = seg_buffer1[1];
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <start_SEG7+0x1c>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <start_SEG7+0x24>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000044 	.word	0x20000044
 8000810:	20000084 	.word	0x20000084
 8000814:	20000088 	.word	0x20000088

08000818 <fsm_Suy_Exercise>:


//FSM_MACHINE_SYSTEM

void fsm_Suy_Exercise(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	switch(status_BUTTONS){
 800081c:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b03      	cmp	r3, #3
 8000822:	f200 80f0 	bhi.w	8000a06 <fsm_Suy_Exercise+0x1ee>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <fsm_Suy_Exercise+0x14>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	0800083d 	.word	0x0800083d
 8000830:	0800086d 	.word	0x0800086d
 8000834:	080008fd 	.word	0x080008fd
 8000838:	0800098b 	.word	0x0800098b
	case 0:

		TRAFFIC_NORMAL1();
 800083c:	f7ff fe6c 	bl	8000518 <TRAFFIC_NORMAL1>
		TRAFFIC_NORMAL2();
 8000840:	f7ff ff0a 	bl	8000658 <TRAFFIC_NORMAL2>
		if(is_SELECT_PRESSED() == 1){
 8000844:	f7ff fc82 	bl	800014c <is_SELECT_PRESSED>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	f040 80dd 	bne.w	8000a0a <fsm_Suy_Exercise+0x1f2>
			status_BUTTONS = 1;
 8000850:	4b72      	ldr	r3, [pc, #456]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
			seg_index4 = 2;
 8000856:	4b72      	ldr	r3, [pc, #456]	; (8000a20 <fsm_Suy_Exercise+0x208>)
 8000858:	2202      	movs	r2, #2
 800085a:	601a      	str	r2, [r3, #0]
			seg_index3 = 0;
 800085c:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <fsm_Suy_Exercise+0x20c>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
			OFF_ALL_LED1();
 8000862:	f7ff ffaf 	bl	80007c4 <OFF_ALL_LED1>
			OFF_ALL_LED2();
 8000866:	f7ff ff97 	bl	8000798 <OFF_ALL_LED2>
		}
		break;
 800086a:	e0ce      	b.n	8000a0a <fsm_Suy_Exercise+0x1f2>
	case 1:
		blink_RED();
 800086c:	f7ff fdc4 	bl	80003f8 <blink_RED>
		seg_index1 = seg_buffer1[0]/10;
 8000870:	4b6d      	ldr	r3, [pc, #436]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a6d      	ldr	r2, [pc, #436]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 8000876:	fb82 1203 	smull	r1, r2, r2, r3
 800087a:	1092      	asrs	r2, r2, #2
 800087c:	17db      	asrs	r3, r3, #31
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a6b      	ldr	r2, [pc, #428]	; (8000a30 <fsm_Suy_Exercise+0x218>)
 8000882:	6013      	str	r3, [r2, #0]
		seg_index2 = seg_buffer1[0]%10;
 8000884:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000886:	6819      	ldr	r1, [r3, #0]
 8000888:	4b68      	ldr	r3, [pc, #416]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 800088a:	fb83 2301 	smull	r2, r3, r3, r1
 800088e:	109a      	asrs	r2, r3, #2
 8000890:	17cb      	asrs	r3, r1, #31
 8000892:	1ad2      	subs	r2, r2, r3
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	1aca      	subs	r2, r1, r3
 800089e:	4b65      	ldr	r3, [pc, #404]	; (8000a34 <fsm_Suy_Exercise+0x21c>)
 80008a0:	601a      	str	r2, [r3, #0]
		if(is_SELECT_PRESSED() == 1){
 80008a2:	f7ff fc53 	bl	800014c <is_SELECT_PRESSED>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d10b      	bne.n	80008c4 <fsm_Suy_Exercise+0xac>
			status_BUTTONS = 2;
 80008ac:	4b5b      	ldr	r3, [pc, #364]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	601a      	str	r2, [r3, #0]
			seg_index4 ++;
 80008b2:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <fsm_Suy_Exercise+0x208>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a59      	ldr	r2, [pc, #356]	; (8000a20 <fsm_Suy_Exercise+0x208>)
 80008ba:	6013      	str	r3, [r2, #0]
			OFF_ALL_LED1();
 80008bc:	f7ff ff82 	bl	80007c4 <OFF_ALL_LED1>
			OFF_ALL_LED2();
 80008c0:	f7ff ff6a 	bl	8000798 <OFF_ALL_LED2>
		}
		if(is_SET_PRESSED() == 1){
 80008c4:	f7ff fd32 	bl	800032c <is_SET_PRESSED>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d102      	bne.n	80008d4 <fsm_Suy_Exercise+0xbc>
			status_BUTTONS = 0;
 80008ce:	4b53      	ldr	r3, [pc, #332]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
		}
		if(is_MODIFY_PRESSED() == 1){
 80008d4:	f7ff fcb8 	bl	8000248 <is_MODIFY_PRESSED>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b01      	cmp	r3, #1
 80008dc:	f040 8097 	bne.w	8000a0e <fsm_Suy_Exercise+0x1f6>
			if(seg_buffer1[0]<99){
 80008e0:	4b51      	ldr	r3, [pc, #324]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b62      	cmp	r3, #98	; 0x62
 80008e6:	dc05      	bgt.n	80008f4 <fsm_Suy_Exercise+0xdc>
				seg_buffer1[0]=seg_buffer1[0]+1;//1-99
 80008e8:	4b4f      	ldr	r3, [pc, #316]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	4a4e      	ldr	r2, [pc, #312]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80008f0:	6013      	str	r3, [r2, #0]
			}
		}
//		if(is_MODIFY_PRESSED() == 1){
//
//			}
		break;
 80008f2:	e08c      	b.n	8000a0e <fsm_Suy_Exercise+0x1f6>
					seg_buffer1[0]=1;
 80008f4:	4b4c      	ldr	r3, [pc, #304]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
		break;
 80008fa:	e088      	b.n	8000a0e <fsm_Suy_Exercise+0x1f6>
	case 2:
		seg_index1 = seg_buffer1[2]/10;
 80008fc:	4b4a      	ldr	r3, [pc, #296]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	4a4a      	ldr	r2, [pc, #296]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 8000902:	fb82 1203 	smull	r1, r2, r2, r3
 8000906:	1092      	asrs	r2, r2, #2
 8000908:	17db      	asrs	r3, r3, #31
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	4a48      	ldr	r2, [pc, #288]	; (8000a30 <fsm_Suy_Exercise+0x218>)
 800090e:	6013      	str	r3, [r2, #0]
		seg_index2 = seg_buffer1[2]%10;
 8000910:	4b45      	ldr	r3, [pc, #276]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000912:	6899      	ldr	r1, [r3, #8]
 8000914:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 8000916:	fb83 2301 	smull	r2, r3, r3, r1
 800091a:	109a      	asrs	r2, r3, #2
 800091c:	17cb      	asrs	r3, r1, #31
 800091e:	1ad2      	subs	r2, r2, r3
 8000920:	4613      	mov	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4413      	add	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	1aca      	subs	r2, r1, r3
 800092a:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <fsm_Suy_Exercise+0x21c>)
 800092c:	601a      	str	r2, [r3, #0]
		blink_YELLOW();
 800092e:	f7ff fd7b 	bl	8000428 <blink_YELLOW>
		if((is_SELECT_PRESSED() == 1)){
 8000932:	f7ff fc0b 	bl	800014c <is_SELECT_PRESSED>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d10b      	bne.n	8000954 <fsm_Suy_Exercise+0x13c>
			status_BUTTONS = 3;
 800093c:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 800093e:	2203      	movs	r2, #3
 8000940:	601a      	str	r2, [r3, #0]
			seg_index4++;
 8000942:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <fsm_Suy_Exercise+0x208>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	4a35      	ldr	r2, [pc, #212]	; (8000a20 <fsm_Suy_Exercise+0x208>)
 800094a:	6013      	str	r3, [r2, #0]
			OFF_ALL_LED1();
 800094c:	f7ff ff3a 	bl	80007c4 <OFF_ALL_LED1>
			OFF_ALL_LED2();
 8000950:	f7ff ff22 	bl	8000798 <OFF_ALL_LED2>
		}
		if(is_MODIFY_PRESSED() == 1){
 8000954:	f7ff fc78 	bl	8000248 <is_MODIFY_PRESSED>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d10c      	bne.n	8000978 <fsm_Suy_Exercise+0x160>
			if(seg_buffer1[2]<99){
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	2b62      	cmp	r3, #98	; 0x62
 8000964:	dc05      	bgt.n	8000972 <fsm_Suy_Exercise+0x15a>
				seg_buffer1[2]=seg_buffer1[2]+1;//1-99
 8000966:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	3301      	adds	r3, #1
 800096c:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 800096e:	6093      	str	r3, [r2, #8]
 8000970:	e002      	b.n	8000978 <fsm_Suy_Exercise+0x160>
				} else {
					seg_buffer1[2]=1;
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 8000974:	2201      	movs	r2, #1
 8000976:	609a      	str	r2, [r3, #8]
				}
		}
		if(is_SET_PRESSED() == 1){
 8000978:	f7ff fcd8 	bl	800032c <is_SET_PRESSED>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d147      	bne.n	8000a12 <fsm_Suy_Exercise+0x1fa>
			status_BUTTONS = 0;
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
		}
		break;
 8000988:	e043      	b.n	8000a12 <fsm_Suy_Exercise+0x1fa>
	case 3:
		seg_index1 = seg_buffer1[1]/10;
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 8000990:	fb82 1203 	smull	r1, r2, r2, r3
 8000994:	1092      	asrs	r2, r2, #2
 8000996:	17db      	asrs	r3, r3, #31
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <fsm_Suy_Exercise+0x218>)
 800099c:	6013      	str	r3, [r2, #0]
		seg_index2 = seg_buffer1[1]%10;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80009a0:	6859      	ldr	r1, [r3, #4]
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <fsm_Suy_Exercise+0x214>)
 80009a4:	fb83 2301 	smull	r2, r3, r3, r1
 80009a8:	109a      	asrs	r2, r3, #2
 80009aa:	17cb      	asrs	r3, r1, #31
 80009ac:	1ad2      	subs	r2, r2, r3
 80009ae:	4613      	mov	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	1aca      	subs	r2, r1, r3
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <fsm_Suy_Exercise+0x21c>)
 80009ba:	601a      	str	r2, [r3, #0]
		blink_GREEN();
 80009bc:	f7ff fd4c 	bl	8000458 <blink_GREEN>
		if(is_SELECT_PRESSED() == 1){
 80009c0:	f7ff fbc4 	bl	800014c <is_SELECT_PRESSED>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d102      	bne.n	80009d0 <fsm_Suy_Exercise+0x1b8>
					status_BUTTONS = 1;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
				}
		if(is_MODIFY_PRESSED() == 1){
 80009d0:	f7ff fc3a 	bl	8000248 <is_MODIFY_PRESSED>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d10c      	bne.n	80009f4 <fsm_Suy_Exercise+0x1dc>
			if(seg_buffer1[1]<99){
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b62      	cmp	r3, #98	; 0x62
 80009e0:	dc05      	bgt.n	80009ee <fsm_Suy_Exercise+0x1d6>
				seg_buffer1[1]=seg_buffer1[1]+1;//1-99
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	3301      	adds	r3, #1
 80009e8:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80009ea:	6053      	str	r3, [r2, #4]
 80009ec:	e002      	b.n	80009f4 <fsm_Suy_Exercise+0x1dc>
				} else {
					seg_buffer1[1]=1;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <fsm_Suy_Exercise+0x210>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
				}
		}
		if(is_SET_PRESSED() == 1){
 80009f4:	f7ff fc9a 	bl	800032c <is_SET_PRESSED>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d10b      	bne.n	8000a16 <fsm_Suy_Exercise+0x1fe>
					status_BUTTONS = 0;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <fsm_Suy_Exercise+0x204>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
				}
		break;
 8000a04:	e007      	b.n	8000a16 <fsm_Suy_Exercise+0x1fe>
	default:
		break;
 8000a06:	bf00      	nop
 8000a08:	e006      	b.n	8000a18 <fsm_Suy_Exercise+0x200>
		break;
 8000a0a:	bf00      	nop
 8000a0c:	e004      	b.n	8000a18 <fsm_Suy_Exercise+0x200>
		break;
 8000a0e:	bf00      	nop
 8000a10:	e002      	b.n	8000a18 <fsm_Suy_Exercise+0x200>
		break;
 8000a12:	bf00      	nop
 8000a14:	e000      	b.n	8000a18 <fsm_Suy_Exercise+0x200>
		break;
 8000a16:	bf00      	nop
	}
	return;
 8000a18:	bf00      	nop
}
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	20000450 	.word	0x20000450
 8000a24:	2000044c 	.word	0x2000044c
 8000a28:	20000044 	.word	0x20000044
 8000a2c:	66666667 	.word	0x66666667
 8000a30:	20000444 	.word	0x20000444
 8000a34:	20000448 	.word	0x20000448

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 fb8c 	bl	8001158 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Initialize a schedule
  		 SCH_Init() ;
 8000a40:	f000 f96b 	bl	8000d1a <SCH_Init>
  	//Add a task to repeatedly call in every 1 second .
  		 OFF_ALL_LED1();
 8000a44:	f7ff febe 	bl	80007c4 <OFF_ALL_LED1>
  		 OFF_ALL_LED2();
 8000a48:	f7ff fea6 	bl	8000798 <OFF_ALL_LED2>
//  		 SCH_Add_Task(Toggle2, 300 , 100) ;
//  		 SCH_Add_Task(Toggle3, 200, 100);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f816 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 f8ea 	bl	8000c28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a54:	f000 f84e 	bl	8000af4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a58:	f000 f898 	bl	8000b8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <main+0x3c>)
 8000a5e:	f001 fae7 	bl	8002030 <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT(&htim3);
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <main+0x40>)
 8000a64:	f001 fae4 	bl	8002030 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
start_SEG7();
 8000a68:	f7ff fec2 	bl	80007f0 <start_SEG7>
//	  Toggle();
//	  HAL_Delay(1000);


//	  to_do_7SEG();
	  fsm_Suy_Exercise();
 8000a6c:	f7ff fed4 	bl	8000818 <fsm_Suy_Exercise>
 8000a70:	e7fc      	b.n	8000a6c <main+0x34>
 8000a72:	bf00      	nop
 8000a74:	20000090 	.word	0x20000090
 8000a78:	200000d8 	.word	0x200000d8

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b090      	sub	sp, #64	; 0x40
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	2228      	movs	r2, #40	; 0x28
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fe88 	bl	80027a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fe84 	bl	80017c0 <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000abe:	f000 f927 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 f8f2 	bl	8001cc4 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 f913 	bl	8000d10 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3740      	adds	r7, #64	; 0x40
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b1a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b28:	2209      	movs	r2, #9
 8000b2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b3a:	f001 fa29 	bl	8001f90 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b44:	f000 f8e4 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4619      	mov	r1, r3
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b56:	f001 fbbf 	bl	80022d8 <HAL_TIM_ConfigClockSource>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b60:	f000 f8d6 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b72:	f001 fd87 	bl	8002684 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 f8c8 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000090 	.word	0x20000090

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000baa:	4a1e      	ldr	r2, [pc, #120]	; (8000c24 <MX_TIM3_Init+0x98>)
 8000bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bb0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bbe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bd0:	4813      	ldr	r0, [pc, #76]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bd2:	f001 f9dd 	bl	8001f90 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000bdc:	f000 f898 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4619      	mov	r1, r3
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bee:	f001 fb73 	bl	80022d8 <HAL_TIM_ConfigClockSource>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000bf8:	f000 f88a 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000c0a:	f001 fd3b 	bl	8002684 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c14:	f000 f87c 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200000d8 	.word	0x200000d8
 8000c24:	40000400 	.word	0x40000400

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a28      	ldr	r2, [pc, #160]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <MX_GPIO_Init+0xbc>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|RED2_Pin|PURPLE1_Pin|PURPLE2_Pin
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f24f 6166 	movw	r1, #63078	; 0xf666
 8000c72:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <MX_GPIO_Init+0xc0>)
 8000c74:	f000 fd73 	bl	800175e <HAL_GPIO_WritePin>
                          |GREEN1_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB4_Pin|PB5_Pin|PB6_Pin|PB0_Pin
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8000c7e:	481b      	ldr	r0, [pc, #108]	; (8000cec <MX_GPIO_Init+0xc4>)
 8000c80:	f000 fd6d 	bl	800175e <HAL_GPIO_WritePin>
                          |PB1_Pin|PB2_Pin|PB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin RED2_Pin PURPLE1_Pin PURPLE2_Pin
                           GREEN1_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|RED2_Pin|PURPLE1_Pin|PURPLE2_Pin
 8000c84:	f24f 6366 	movw	r3, #63078	; 0xf666
 8000c88:	60bb      	str	r3, [r7, #8]
                          |GREEN1_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2302      	movs	r3, #2
 8000c94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <MX_GPIO_Init+0xc0>)
 8000c9e:	f000 fbcb 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_Pin PB5_Pin PB6_Pin PB0_Pin
                           PB1_Pin PB2_Pin PB3_Pin */
  GPIO_InitStruct.Pin = PB4_Pin|PB5_Pin|PB6_Pin|PB0_Pin
 8000ca2:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000ca6:	60bb      	str	r3, [r7, #8]
                          |PB1_Pin|PB2_Pin|PB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_GPIO_Init+0xc4>)
 8000cbc:	f000 fbbc 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_Pin MODIFY_Pin SET_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|MODIFY_Pin|SET_Pin;
 8000cc0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_GPIO_Init+0xc4>)
 8000cd6:	f000 fbaf 	bl	8001438 <HAL_GPIO_Init>

}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	timerRun();
 8000cf8:	f000 f8e6 	bl	8000ec8 <timerRun>
//	timerRun_7seg();
//	getKeyInput();
	get_key_Input();
 8000cfc:	f7ff fa44 	bl	8000188 <get_key_Input>
	get_key_Input2();
 8000d00:	f7ff fab4 	bl	800026c <get_key_Input2>
	get_key_Input3();
 8000d04:	f7ff fb24 	bl	8000350 <get_key_Input3>
//	SCH_Update();
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>

08000d1a <SCH_Init>:



//Init the system tasks
void SCH_Init ( void )
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
unsigned char i ;
for ( i = 0; i < SCH_MAX_TASKS; i ++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	e006      	b.n	8000d34 <SCH_Init+0x1a>
	{
		SCH_Delete_Task( i ) ;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f80b 	bl	8000d44 <SCH_Delete_Task>
for ( i = 0; i < SCH_MAX_TASKS; i ++)
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	3301      	adds	r3, #1
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b27      	cmp	r3, #39	; 0x27
 8000d38:	d9f5      	bls.n	8000d26 <SCH_Init+0xc>
// âˆ’ SCH_Delete_Task () w ill generate an error code ,
// ( because the task array i s empty)
//	Error_code_G = 0;
//	Timer_init();
//	Watchdog_init () ;
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <SCH_Delete_Task>:

		}
}

void SCH_Delete_Task( const int TASK_INDEX) //tByte here
{
 8000d44:	b4b0      	push	{r4, r5, r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	for (int i = TASK_INDEX;i<(numOfTaskNow);i++)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	e017      	b.n	8000d82 <SCH_Delete_Task+0x3e>
	    {
	        SCH_tasks_G[i]=SCH_tasks_G[i+1];
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	4828      	ldr	r0, [pc, #160]	; (8000df8 <SCH_Delete_Task+0xb4>)
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4418      	add	r0, r3
 8000d64:	4924      	ldr	r1, [pc, #144]	; (8000df8 <SCH_Delete_Task+0xb4>)
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	440b      	add	r3, r1
 8000d70:	4604      	mov	r4, r0
 8000d72:	461d      	mov	r5, r3
 8000d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	6023      	str	r3, [r4, #0]
	for (int i = TASK_INDEX;i<(numOfTaskNow);i++)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <SCH_Delete_Task+0xb8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbe2      	blt.n	8000d52 <SCH_Delete_Task+0xe>
	    }
	    	SCH_tasks_G[numOfTaskNow].pTask = 0x0000 ;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <SCH_Delete_Task+0xb8>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4919      	ldr	r1, [pc, #100]	; (8000df8 <SCH_Delete_Task+0xb4>)
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
	    	SCH_tasks_G[numOfTaskNow].Delay = 0;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <SCH_Delete_Task+0xb8>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4914      	ldr	r1, [pc, #80]	; (8000df8 <SCH_Delete_Task+0xb4>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	3304      	adds	r3, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
	    	SCH_tasks_G[numOfTaskNow].Period = 0;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <SCH_Delete_Task+0xb8>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	490f      	ldr	r1, [pc, #60]	; (8000df8 <SCH_Delete_Task+0xb4>)
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
	    	SCH_tasks_G[numOfTaskNow].RunMe = 0;
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <SCH_Delete_Task+0xb8>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4909      	ldr	r1, [pc, #36]	; (8000df8 <SCH_Delete_Task+0xb4>)
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	330c      	adds	r3, #12
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
	    	numOfTaskNow--;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SCH_Delete_Task+0xb8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <SCH_Delete_Task+0xb8>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bcb0      	pop	{r4, r5, r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000120 	.word	0x20000120
 8000dfc:	20000440 	.word	0x20000440

08000e00 <setTimer1>:
int timer_flag2;
int timer_flag3;


//setTimer for Traffic light ngang
void setTimer1(int duration1){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	counter1 = duration1;
 8000e08:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <setTimer1+0x20>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
	timer_flag1 = 0;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <setTimer1+0x24>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000454 	.word	0x20000454
 8000e24:	20000460 	.word	0x20000460

08000e28 <setTimer2>:

//setTimer for Traffic light ngang
void setTimer2(int duration2){
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	counter2 = duration2;
 8000e30:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <setTimer2+0x20>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
	timer_flag2 = 0;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <setTimer2+0x24>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000458 	.word	0x20000458
 8000e4c:	20000464 	.word	0x20000464

08000e50 <setTimer_for_RED_blink>:


//Led blink in change mode
int RED_BLINK_counter = 0;
int RED_BLINK_flag = 0;
void setTimer_for_RED_blink(int duration){
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	RED_BLINK_counter = duration;
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <setTimer_for_RED_blink+0x20>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
	RED_BLINK_flag = 0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <setTimer_for_RED_blink+0x24>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000046c 	.word	0x2000046c
 8000e74:	20000470 	.word	0x20000470

08000e78 <setTimer_for_GREEN_blink>:

int GREEN_BLINK_counter = 0;
int GREEN_BLINK_flag = 0;
void setTimer_for_GREEN_blink(int duration){
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	GREEN_BLINK_counter = duration;
 8000e80:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <setTimer_for_GREEN_blink+0x20>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
	GREEN_BLINK_flag = 0;
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <setTimer_for_GREEN_blink+0x24>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000474 	.word	0x20000474
 8000e9c:	20000478 	.word	0x20000478

08000ea0 <setTimer_for_YELLOW_blink>:

int YELLOW_BLINK_counter = 0;
int YELLOW_BLINK_flag = 0;
void setTimer_for_YELLOW_blink(int duration){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	YELLOW_BLINK_counter = duration;
 8000ea8:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <setTimer_for_YELLOW_blink+0x20>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
	YELLOW_BLINK_flag = 0;
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <setTimer_for_YELLOW_blink+0x24>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000047c 	.word	0x2000047c
 8000ec4:	20000480 	.word	0x20000480

08000ec8 <timerRun>:

//TimerRun for system
void timerRun(){
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	if(counter1 > 0){
 8000ecc:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <timerRun+0xcc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	dd04      	ble.n	8000ede <timerRun+0x16>
		counter1--;
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <timerRun+0xcc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	4a2e      	ldr	r2, [pc, #184]	; (8000f94 <timerRun+0xcc>)
 8000edc:	6013      	str	r3, [r2, #0]
	}
	if(counter1 <= 0){
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <timerRun+0xcc>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	dc02      	bgt.n	8000eec <timerRun+0x24>
		timer_flag1 = 1;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <timerRun+0xd0>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
	}
	if(counter2 > 0){
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <timerRun+0xd4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dd04      	ble.n	8000efe <timerRun+0x36>
		counter2--;
 8000ef4:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <timerRun+0xd4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <timerRun+0xd4>)
 8000efc:	6013      	str	r3, [r2, #0]
	}
	if(counter2 <= 0){
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <timerRun+0xd4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	dc02      	bgt.n	8000f0c <timerRun+0x44>
		timer_flag2 = 1;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <timerRun+0xd8>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
	}
	if(counter3 > 0){
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <timerRun+0xdc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dd04      	ble.n	8000f1e <timerRun+0x56>
		counter3--;
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <timerRun+0xdc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <timerRun+0xdc>)
 8000f1c:	6013      	str	r3, [r2, #0]
	}
	if(counter3 <= 0){
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <timerRun+0xdc>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	dc02      	bgt.n	8000f2c <timerRun+0x64>
		timer_flag3 = 1;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <timerRun+0xe0>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
	}
	if(RED_BLINK_counter > 0){
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <timerRun+0xe4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dd04      	ble.n	8000f3e <timerRun+0x76>
		RED_BLINK_counter--;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <timerRun+0xe4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <timerRun+0xe4>)
 8000f3c:	6013      	str	r3, [r2, #0]
	}
	if(RED_BLINK_counter <= 0){
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <timerRun+0xe4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	dc02      	bgt.n	8000f4c <timerRun+0x84>
		RED_BLINK_flag = 1;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <timerRun+0xe8>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
	}
	if(YELLOW_BLINK_counter > 0){
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <timerRun+0xec>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd04      	ble.n	8000f5e <timerRun+0x96>
		YELLOW_BLINK_counter--;
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <timerRun+0xec>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <timerRun+0xec>)
 8000f5c:	6013      	str	r3, [r2, #0]
	}
	if(YELLOW_BLINK_counter <= 0){
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <timerRun+0xec>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	dc02      	bgt.n	8000f6c <timerRun+0xa4>
		YELLOW_BLINK_flag = 1;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <timerRun+0xf0>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
	}
	if(GREEN_BLINK_counter > 0){
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <timerRun+0xf4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd04      	ble.n	8000f7e <timerRun+0xb6>
		GREEN_BLINK_counter--;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <timerRun+0xf4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <timerRun+0xf4>)
 8000f7c:	6013      	str	r3, [r2, #0]
	}
	if(GREEN_BLINK_counter <= 0){
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <timerRun+0xf4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	dc02      	bgt.n	8000f8c <timerRun+0xc4>
		GREEN_BLINK_flag = 1;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <timerRun+0xf8>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	20000454 	.word	0x20000454
 8000f98:	20000460 	.word	0x20000460
 8000f9c:	20000458 	.word	0x20000458
 8000fa0:	20000464 	.word	0x20000464
 8000fa4:	2000045c 	.word	0x2000045c
 8000fa8:	20000468 	.word	0x20000468
 8000fac:	2000046c 	.word	0x2000046c
 8000fb0:	20000470 	.word	0x20000470
 8000fb4:	2000047c 	.word	0x2000047c
 8000fb8:	20000480 	.word	0x20000480
 8000fbc:	20000474 	.word	0x20000474
 8000fc0:	20000478 	.word	0x20000478

08000fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_MspInit+0x40>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_MspInit+0x40>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_MspInit+0x40>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_MspInit+0x40>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_MspInit+0x40>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_MspInit+0x40>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d114      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_TIM_Base_MspInit+0x78>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a18      	ldr	r2, [pc, #96]	; (8001080 <HAL_TIM_Base_MspInit+0x78>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_TIM_Base_MspInit+0x78>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	201c      	movs	r0, #28
 8001038:	f000 f9c7 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800103c:	201c      	movs	r0, #28
 800103e:	f000 f9e0 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001042:	e018      	b.n	8001076 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <HAL_TIM_Base_MspInit+0x7c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d113      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_TIM_Base_MspInit+0x78>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_TIM_Base_MspInit+0x78>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	61d3      	str	r3, [r2, #28]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_TIM_Base_MspInit+0x78>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	201d      	movs	r0, #29
 800106c:	f000 f9ad 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001070:	201d      	movs	r0, #29
 8001072:	f000 f9c6 	bl	8001402 <HAL_NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	40000400 	.word	0x40000400

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ce:	f000 f889 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <TIM2_IRQHandler+0x10>)
 80010de:	f000 fff3 	bl	80020c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000090 	.word	0x20000090

080010ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM3_IRQHandler+0x10>)
 80010f2:	f000 ffe9 	bl	80020c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200000d8 	.word	0x200000d8

08001100 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	; (8001144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	; (8001150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001132:	f7ff ffe5 	bl	8001100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f001 fb0f 	bl	8002758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113a:	f7ff fc7d 	bl	8000a38 <main>
  bx lr
 800113e:	4770      	bx	lr
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001148:	080027f0 	.word	0x080027f0
  ldr r2, =_sbss
 800114c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001150:	20000488 	.word	0x20000488

08001154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_2_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_Init+0x28>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_Init+0x28>)
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 f923 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116e:	200f      	movs	r0, #15
 8001170:	f000 f808 	bl	8001184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001174:	f7ff ff26 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40022000 	.word	0x40022000

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x54>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x58>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f93b 	bl	800141e <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 f903 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <HAL_InitTick+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000050 	.word	0x20000050
 80011dc:	20000058 	.word	0x20000058
 80011e0:	20000054 	.word	0x20000054

080011e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_IncTick+0x1c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x20>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a03      	ldr	r2, [pc, #12]	; (8001204 <HAL_IncTick+0x20>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	20000058 	.word	0x20000058
 8001204:	20000484 	.word	0x20000484

08001208 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b02      	ldr	r3, [pc, #8]	; (8001218 <HAL_GetTick+0x10>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000484 	.word	0x20000484

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4906      	ldr	r1, [pc, #24]	; (80012b4 <__NVIC_EnableIRQ+0x34>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff90 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff2d 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff42 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff90 	bl	800130c <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5f 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff35 	bl	8001280 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffa2 	bl	8001370 <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b08b      	sub	sp, #44	; 0x2c
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	e161      	b.n	8001710 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800144c:	2201      	movs	r2, #1
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	429a      	cmp	r2, r3
 8001466:	f040 8150 	bne.w	800170a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a97      	ldr	r2, [pc, #604]	; (80016cc <HAL_GPIO_Init+0x294>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d05e      	beq.n	8001532 <HAL_GPIO_Init+0xfa>
 8001474:	4a95      	ldr	r2, [pc, #596]	; (80016cc <HAL_GPIO_Init+0x294>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d875      	bhi.n	8001566 <HAL_GPIO_Init+0x12e>
 800147a:	4a95      	ldr	r2, [pc, #596]	; (80016d0 <HAL_GPIO_Init+0x298>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d058      	beq.n	8001532 <HAL_GPIO_Init+0xfa>
 8001480:	4a93      	ldr	r2, [pc, #588]	; (80016d0 <HAL_GPIO_Init+0x298>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d86f      	bhi.n	8001566 <HAL_GPIO_Init+0x12e>
 8001486:	4a93      	ldr	r2, [pc, #588]	; (80016d4 <HAL_GPIO_Init+0x29c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d052      	beq.n	8001532 <HAL_GPIO_Init+0xfa>
 800148c:	4a91      	ldr	r2, [pc, #580]	; (80016d4 <HAL_GPIO_Init+0x29c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d869      	bhi.n	8001566 <HAL_GPIO_Init+0x12e>
 8001492:	4a91      	ldr	r2, [pc, #580]	; (80016d8 <HAL_GPIO_Init+0x2a0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d04c      	beq.n	8001532 <HAL_GPIO_Init+0xfa>
 8001498:	4a8f      	ldr	r2, [pc, #572]	; (80016d8 <HAL_GPIO_Init+0x2a0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d863      	bhi.n	8001566 <HAL_GPIO_Init+0x12e>
 800149e:	4a8f      	ldr	r2, [pc, #572]	; (80016dc <HAL_GPIO_Init+0x2a4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d046      	beq.n	8001532 <HAL_GPIO_Init+0xfa>
 80014a4:	4a8d      	ldr	r2, [pc, #564]	; (80016dc <HAL_GPIO_Init+0x2a4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d85d      	bhi.n	8001566 <HAL_GPIO_Init+0x12e>
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d82a      	bhi.n	8001504 <HAL_GPIO_Init+0xcc>
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d859      	bhi.n	8001566 <HAL_GPIO_Init+0x12e>
 80014b2:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <HAL_GPIO_Init+0x80>)
 80014b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b8:	08001533 	.word	0x08001533
 80014bc:	0800150d 	.word	0x0800150d
 80014c0:	0800151f 	.word	0x0800151f
 80014c4:	08001561 	.word	0x08001561
 80014c8:	08001567 	.word	0x08001567
 80014cc:	08001567 	.word	0x08001567
 80014d0:	08001567 	.word	0x08001567
 80014d4:	08001567 	.word	0x08001567
 80014d8:	08001567 	.word	0x08001567
 80014dc:	08001567 	.word	0x08001567
 80014e0:	08001567 	.word	0x08001567
 80014e4:	08001567 	.word	0x08001567
 80014e8:	08001567 	.word	0x08001567
 80014ec:	08001567 	.word	0x08001567
 80014f0:	08001567 	.word	0x08001567
 80014f4:	08001567 	.word	0x08001567
 80014f8:	08001567 	.word	0x08001567
 80014fc:	08001515 	.word	0x08001515
 8001500:	08001529 	.word	0x08001529
 8001504:	4a76      	ldr	r2, [pc, #472]	; (80016e0 <HAL_GPIO_Init+0x2a8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800150a:	e02c      	b.n	8001566 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	623b      	str	r3, [r7, #32]
          break;
 8001512:	e029      	b.n	8001568 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	3304      	adds	r3, #4
 800151a:	623b      	str	r3, [r7, #32]
          break;
 800151c:	e024      	b.n	8001568 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	3308      	adds	r3, #8
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e01f      	b.n	8001568 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	330c      	adds	r3, #12
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e01a      	b.n	8001568 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800153a:	2304      	movs	r3, #4
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e013      	b.n	8001568 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001548:	2308      	movs	r3, #8
 800154a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	611a      	str	r2, [r3, #16]
          break;
 8001552:	e009      	b.n	8001568 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001554:	2308      	movs	r3, #8
 8001556:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	615a      	str	r2, [r3, #20]
          break;
 800155e:	e003      	b.n	8001568 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
          break;
 8001564:	e000      	b.n	8001568 <HAL_GPIO_Init+0x130>
          break;
 8001566:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2bff      	cmp	r3, #255	; 0xff
 800156c:	d801      	bhi.n	8001572 <HAL_GPIO_Init+0x13a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	e001      	b.n	8001576 <HAL_GPIO_Init+0x13e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3304      	adds	r3, #4
 8001576:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	2bff      	cmp	r3, #255	; 0xff
 800157c:	d802      	bhi.n	8001584 <HAL_GPIO_Init+0x14c>
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	e002      	b.n	800158a <HAL_GPIO_Init+0x152>
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	3b08      	subs	r3, #8
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	210f      	movs	r1, #15
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	401a      	ands	r2, r3
 800159c:	6a39      	ldr	r1, [r7, #32]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	431a      	orrs	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80a9 	beq.w	800170a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b8:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x2ac>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <HAL_GPIO_Init+0x2ac>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_GPIO_Init+0x2ac>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d0:	4a45      	ldr	r2, [pc, #276]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a3d      	ldr	r2, [pc, #244]	; (80016ec <HAL_GPIO_Init+0x2b4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00d      	beq.n	8001618 <HAL_GPIO_Init+0x1e0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a3c      	ldr	r2, [pc, #240]	; (80016f0 <HAL_GPIO_Init+0x2b8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d007      	beq.n	8001614 <HAL_GPIO_Init+0x1dc>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3b      	ldr	r2, [pc, #236]	; (80016f4 <HAL_GPIO_Init+0x2bc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_GPIO_Init+0x1d8>
 800160c:	2302      	movs	r3, #2
 800160e:	e004      	b.n	800161a <HAL_GPIO_Init+0x1e2>
 8001610:	2303      	movs	r3, #3
 8001612:	e002      	b.n	800161a <HAL_GPIO_Init+0x1e2>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_GPIO_Init+0x1e2>
 8001618:	2300      	movs	r3, #0
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	f002 0203 	and.w	r2, r2, #3
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	4093      	lsls	r3, r2
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800162a:	492f      	ldr	r1, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001644:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	492b      	ldr	r1, [pc, #172]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	4927      	ldr	r1, [pc, #156]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 800165c:	4013      	ands	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4921      	ldr	r1, [pc, #132]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	491d      	ldr	r1, [pc, #116]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 8001684:	4013      	ands	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	4917      	ldr	r1, [pc, #92]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4913      	ldr	r1, [pc, #76]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01f      	beq.n	80016fc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	490d      	ldr	r1, [pc, #52]	; (80016f8 <HAL_GPIO_Init+0x2c0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
 80016c8:	e01f      	b.n	800170a <HAL_GPIO_Init+0x2d2>
 80016ca:	bf00      	nop
 80016cc:	10320000 	.word	0x10320000
 80016d0:	10310000 	.word	0x10310000
 80016d4:	10220000 	.word	0x10220000
 80016d8:	10210000 	.word	0x10210000
 80016dc:	10120000 	.word	0x10120000
 80016e0:	10110000 	.word	0x10110000
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40010800 	.word	0x40010800
 80016f0:	40010c00 	.word	0x40010c00
 80016f4:	40011000 	.word	0x40011000
 80016f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_GPIO_Init+0x2f4>)
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	43db      	mvns	r3, r3
 8001704:	4909      	ldr	r1, [pc, #36]	; (800172c <HAL_GPIO_Init+0x2f4>)
 8001706:	4013      	ands	r3, r2
 8001708:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	fa22 f303 	lsr.w	r3, r2, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	f47f ae96 	bne.w	800144c <HAL_GPIO_Init+0x14>
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	372c      	adds	r7, #44	; 0x2c
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e001      	b.n	8001752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	807b      	strh	r3, [r7, #2]
 800176a:	4613      	mov	r3, r2
 800176c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800176e:	787b      	ldrb	r3, [r7, #1]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001774:	887a      	ldrh	r2, [r7, #2]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800177a:	e003      	b.n	8001784 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	041a      	lsls	r2, r3, #16
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	611a      	str	r2, [r3, #16]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4013      	ands	r3, r2
 80017a6:	041a      	lsls	r2, r3, #16
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	400b      	ands	r3, r1
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	611a      	str	r2, [r3, #16]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e272      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8087 	beq.w	80018ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e0:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d00c      	beq.n	8001806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ec:	4b8f      	ldr	r3, [pc, #572]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d112      	bne.n	800181e <HAL_RCC_OscConfig+0x5e>
 80017f8:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d10b      	bne.n	800181e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001806:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d06c      	beq.n	80018ec <HAL_RCC_OscConfig+0x12c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d168      	bne.n	80018ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e24c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x76>
 8001828:	4b80      	ldr	r3, [pc, #512]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a7f      	ldr	r2, [pc, #508]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800182e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	e02e      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x98>
 800183e:	4b7b      	ldr	r3, [pc, #492]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7a      	ldr	r2, [pc, #488]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a77      	ldr	r2, [pc, #476]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e01d      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0xbc>
 8001862:	4b72      	ldr	r3, [pc, #456]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a71      	ldr	r2, [pc, #452]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 800187c:	4b6b      	ldr	r3, [pc, #428]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6a      	ldr	r2, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b68      	ldr	r3, [pc, #416]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a67      	ldr	r2, [pc, #412]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fcb4 	bl	8001208 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fcb0 	bl	8001208 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e200      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0xe4>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fca0 	bl	8001208 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fc9c 	bl	8001208 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e1ec      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x10c>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d063      	beq.n	80019c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fa:	4b4c      	ldr	r3, [pc, #304]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001906:	4b49      	ldr	r3, [pc, #292]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b08      	cmp	r3, #8
 8001910:	d11c      	bne.n	800194c <HAL_RCC_OscConfig+0x18c>
 8001912:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d116      	bne.n	800194c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x176>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e1c0      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4939      	ldr	r1, [pc, #228]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	e03a      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fc55 	bl	8001208 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff fc51 	bl	8001208 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e1a1      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4927      	ldr	r1, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fc34 	bl	8001208 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff fc30 	bl	8001208 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e180      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d03a      	beq.n	8001a44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d019      	beq.n	8001a0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_RCC_OscConfig+0x274>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fc14 	bl	8001208 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff fc10 	bl	8001208 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e160      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f000 faa6 	bl	8001f54 <RCC_Delay>
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff fbfa 	bl	8001208 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a16:	e00f      	b.n	8001a38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fbf6 	bl	8001208 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d908      	bls.n	8001a38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e146      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	42420000 	.word	0x42420000
 8001a34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	4b92      	ldr	r3, [pc, #584]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e9      	bne.n	8001a18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80a6 	beq.w	8001b9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a56:	4b8b      	ldr	r3, [pc, #556]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10d      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a87      	ldr	r2, [pc, #540]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7e:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <HAL_RCC_OscConfig+0x4c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d118      	bne.n	8001abc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8a:	4b7f      	ldr	r3, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x4c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7e      	ldr	r2, [pc, #504]	; (8001c88 <HAL_RCC_OscConfig+0x4c8>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a96:	f7ff fbb7 	bl	8001208 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9e:	f7ff fbb3 	bl	8001208 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e103      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x4c8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x312>
 8001ac4:	4b6f      	ldr	r3, [pc, #444]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a6e      	ldr	r2, [pc, #440]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	e02d      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x334>
 8001ada:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a69      	ldr	r2, [pc, #420]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	4b67      	ldr	r3, [pc, #412]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a66      	ldr	r2, [pc, #408]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	e01c      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x356>
 8001afc:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a60      	ldr	r2, [pc, #384]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	4b5e      	ldr	r3, [pc, #376]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a5d      	ldr	r2, [pc, #372]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001b16:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a5a      	ldr	r2, [pc, #360]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a57      	ldr	r2, [pc, #348]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d015      	beq.n	8001b62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fb67 	bl	8001208 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff fb63 	bl	8001208 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e0b1      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b54:	4b4b      	ldr	r3, [pc, #300]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ee      	beq.n	8001b3e <HAL_RCC_OscConfig+0x37e>
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb51 	bl	8001208 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fb4d 	bl	8001208 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e09b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ee      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d105      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a3b      	ldr	r2, [pc, #236]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8087 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d061      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d146      	bne.n	8001c4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x4cc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fb21 	bl	8001208 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bca:	f7ff fb1d 	bl	8001208 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e06d      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf0:	d108      	bne.n	8001c04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4921      	ldr	r1, [pc, #132]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a19      	ldr	r1, [r3, #32]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	430b      	orrs	r3, r1
 8001c16:	491b      	ldr	r1, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff faf1 	bl	8001208 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff faed 	bl	8001208 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e03d      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x46a>
 8001c48:	e035      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_RCC_OscConfig+0x4cc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fada 	bl	8001208 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff fad6 	bl	8001208 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e026      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x498>
 8001c76:	e01e      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e019      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_OscConfig+0x500>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0d0      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d910      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4965      	ldr	r1, [pc, #404]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0b8      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d020      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d38:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d44:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	494d      	ldr	r1, [pc, #308]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d040      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d115      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e07f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d82:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e073      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e06b      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f023 0203 	bic.w	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4936      	ldr	r1, [pc, #216]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db4:	f7ff fa28 	bl	8001208 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7ff fa24 	bl	8001208 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e053      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 020c 	and.w	r2, r3, #12
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d1eb      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d210      	bcs.n	8001e14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
 8001dfa:	4922      	ldr	r1, [pc, #136]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e032      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4916      	ldr	r1, [pc, #88]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	490e      	ldr	r1, [pc, #56]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e52:	f000 f821 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	490a      	ldr	r1, [pc, #40]	; (8001e8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e64:	5ccb      	ldrb	r3, [r1, r3]
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x1cc>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1d0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f986 	bl	8001184 <HAL_InitTick>

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	080027d8 	.word	0x080027d8
 8001e90:	20000050 	.word	0x20000050
 8001e94:	20000054 	.word	0x20000054

08001e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	b490      	push	{r4, r7}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ea0:	1d3c      	adds	r4, r7, #4
 8001ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ea8:	f240 2301 	movw	r3, #513	; 0x201
 8001eac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d002      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d003      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x46>
 8001ed6:	e02b      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eda:	623b      	str	r3, [r7, #32]
      break;
 8001edc:	e02b      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	0c9b      	lsrs	r3, r3, #18
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3328      	adds	r3, #40	; 0x28
 8001ee8:	443b      	add	r3, r7
 8001eea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d012      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	0c5b      	lsrs	r3, r3, #17
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	3328      	adds	r3, #40	; 0x28
 8001f06:	443b      	add	r3, r7
 8001f08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f12:	fb03 f202 	mul.w	r2, r3, r2
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1e:	e004      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	623b      	str	r3, [r7, #32]
      break;
 8001f2e:	e002      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f32:	623b      	str	r3, [r7, #32]
      break;
 8001f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f36:	6a3b      	ldr	r3, [r7, #32]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc90      	pop	{r4, r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	080027c8 	.word	0x080027c8
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	007a1200 	.word	0x007a1200
 8001f50:	003d0900 	.word	0x003d0900

08001f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <RCC_Delay+0x34>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <RCC_Delay+0x38>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0a5b      	lsrs	r3, r3, #9
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f70:	bf00      	nop
  }
  while (Delay --);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	60fa      	str	r2, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f9      	bne.n	8001f70 <RCC_Delay+0x1c>
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	20000050 	.word	0x20000050
 8001f8c:	10624dd3 	.word	0x10624dd3

08001f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e041      	b.n	8002026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff f826 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f000 fa6a 	bl	80024a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d001      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e035      	b.n	80020b4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a16      	ldr	r2, [pc, #88]	; (80020c0 <HAL_TIM_Base_Start_IT+0x90>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d009      	beq.n	800207e <HAL_TIM_Base_Start_IT+0x4e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002072:	d004      	beq.n	800207e <HAL_TIM_Base_Start_IT+0x4e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <HAL_TIM_Base_Start_IT+0x94>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d111      	bne.n	80020a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b06      	cmp	r3, #6
 800208e:	d010      	beq.n	80020b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a0:	e007      	b.n	80020b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40000400 	.word	0x40000400

080020c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d122      	bne.n	8002124 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d11b      	bne.n	8002124 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0202 	mvn.w	r2, #2
 80020f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f9b1 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 8002110:	e005      	b.n	800211e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f9a4 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f9b3 	bl	8002484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b04      	cmp	r3, #4
 8002130:	d122      	bne.n	8002178 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b04      	cmp	r3, #4
 800213e:	d11b      	bne.n	8002178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0204 	mvn.w	r2, #4
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2202      	movs	r2, #2
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f987 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f97a 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f989 	bl	8002484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b08      	cmp	r3, #8
 8002184:	d122      	bne.n	80021cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b08      	cmp	r3, #8
 8002192:	d11b      	bne.n	80021cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0208 	mvn.w	r2, #8
 800219c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2204      	movs	r2, #4
 80021a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f95d 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 80021b8:	e005      	b.n	80021c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f950 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f95f 	bl	8002484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d122      	bne.n	8002220 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d11b      	bne.n	8002220 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0210 	mvn.w	r2, #16
 80021f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2208      	movs	r2, #8
 80021f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f933 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 800220c:	e005      	b.n	800221a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f926 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f935 	bl	8002484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d10e      	bne.n	800224c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d107      	bne.n	800224c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0201 	mvn.w	r2, #1
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe fd52 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	2b80      	cmp	r3, #128	; 0x80
 8002258:	d10e      	bne.n	8002278 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002264:	2b80      	cmp	r3, #128	; 0x80
 8002266:	d107      	bne.n	8002278 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fa67 	bl	8002746 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002282:	2b40      	cmp	r3, #64	; 0x40
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002290:	2b40      	cmp	r3, #64	; 0x40
 8002292:	d107      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f8f9 	bl	8002496 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d107      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0220 	mvn.w	r2, #32
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa32 	bl	8002734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_TIM_ConfigClockSource+0x18>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e0b3      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x180>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800230e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002316:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002328:	d03e      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0xd0>
 800232a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232e:	f200 8087 	bhi.w	8002440 <HAL_TIM_ConfigClockSource+0x168>
 8002332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002336:	f000 8085 	beq.w	8002444 <HAL_TIM_ConfigClockSource+0x16c>
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233e:	d87f      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x168>
 8002340:	2b70      	cmp	r3, #112	; 0x70
 8002342:	d01a      	beq.n	800237a <HAL_TIM_ConfigClockSource+0xa2>
 8002344:	2b70      	cmp	r3, #112	; 0x70
 8002346:	d87b      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x168>
 8002348:	2b60      	cmp	r3, #96	; 0x60
 800234a:	d050      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0x116>
 800234c:	2b60      	cmp	r3, #96	; 0x60
 800234e:	d877      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x168>
 8002350:	2b50      	cmp	r3, #80	; 0x50
 8002352:	d03c      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0xf6>
 8002354:	2b50      	cmp	r3, #80	; 0x50
 8002356:	d873      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x168>
 8002358:	2b40      	cmp	r3, #64	; 0x40
 800235a:	d058      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x136>
 800235c:	2b40      	cmp	r3, #64	; 0x40
 800235e:	d86f      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x168>
 8002360:	2b30      	cmp	r3, #48	; 0x30
 8002362:	d064      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x156>
 8002364:	2b30      	cmp	r3, #48	; 0x30
 8002366:	d86b      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x168>
 8002368:	2b20      	cmp	r3, #32
 800236a:	d060      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x156>
 800236c:	2b20      	cmp	r3, #32
 800236e:	d867      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x168>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05c      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x156>
 8002374:	2b10      	cmp	r3, #16
 8002376:	d05a      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002378:	e062      	b.n	8002440 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6899      	ldr	r1, [r3, #8]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f000 f95c 	bl	8002646 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800239c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	609a      	str	r2, [r3, #8]
      break;
 80023a6:	e04e      	b.n	8002446 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6899      	ldr	r1, [r3, #8]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f000 f945 	bl	8002646 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ca:	609a      	str	r2, [r3, #8]
      break;
 80023cc:	e03b      	b.n	8002446 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	461a      	mov	r2, r3
 80023dc:	f000 f8bc 	bl	8002558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2150      	movs	r1, #80	; 0x50
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f913 	bl	8002612 <TIM_ITRx_SetConfig>
      break;
 80023ec:	e02b      	b.n	8002446 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f000 f8da 	bl	80025b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2160      	movs	r1, #96	; 0x60
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f903 	bl	8002612 <TIM_ITRx_SetConfig>
      break;
 800240c:	e01b      	b.n	8002446 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	f000 f89c 	bl	8002558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2140      	movs	r1, #64	; 0x40
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f8f3 	bl	8002612 <TIM_ITRx_SetConfig>
      break;
 800242c:	e00b      	b.n	8002446 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4619      	mov	r1, r3
 8002438:	4610      	mov	r0, r2
 800243a:	f000 f8ea 	bl	8002612 <TIM_ITRx_SetConfig>
        break;
 800243e:	e002      	b.n	8002446 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002440:	bf00      	nop
 8002442:	e000      	b.n	8002446 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002444:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a25      	ldr	r2, [pc, #148]	; (8002550 <TIM_Base_SetConfig+0xa8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d007      	beq.n	80024d0 <TIM_Base_SetConfig+0x28>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c6:	d003      	beq.n	80024d0 <TIM_Base_SetConfig+0x28>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a22      	ldr	r2, [pc, #136]	; (8002554 <TIM_Base_SetConfig+0xac>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d108      	bne.n	80024e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <TIM_Base_SetConfig+0xa8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <TIM_Base_SetConfig+0x52>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f0:	d003      	beq.n	80024fa <TIM_Base_SetConfig+0x52>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a17      	ldr	r2, [pc, #92]	; (8002554 <TIM_Base_SetConfig+0xac>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d108      	bne.n	800250c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <TIM_Base_SetConfig+0xa8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	615a      	str	r2, [r3, #20]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40000400 	.word	0x40000400

08002558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f023 0201 	bic.w	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f023 030a 	bic.w	r3, r3, #10
 8002594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	621a      	str	r2, [r3, #32]
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f023 0210 	bic.w	r2, r3, #16
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	031b      	lsls	r3, r3, #12
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	621a      	str	r2, [r3, #32]
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	f043 0307 	orr.w	r3, r3, #7
 8002634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002646:	b480      	push	{r7}
 8002648:	b087      	sub	sp, #28
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002660:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	021a      	lsls	r2, r3, #8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	431a      	orrs	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4313      	orrs	r3, r2
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002698:	2302      	movs	r3, #2
 800269a:	e041      	b.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a14      	ldr	r2, [pc, #80]	; (800272c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d009      	beq.n	80026f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d004      	beq.n	80026f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d10c      	bne.n	800270e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	4313      	orrs	r3, r2
 8002704:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40000400 	.word	0x40000400

08002734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <__libc_init_array>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	2600      	movs	r6, #0
 800275c:	4d0c      	ldr	r5, [pc, #48]	; (8002790 <__libc_init_array+0x38>)
 800275e:	4c0d      	ldr	r4, [pc, #52]	; (8002794 <__libc_init_array+0x3c>)
 8002760:	1b64      	subs	r4, r4, r5
 8002762:	10a4      	asrs	r4, r4, #2
 8002764:	42a6      	cmp	r6, r4
 8002766:	d109      	bne.n	800277c <__libc_init_array+0x24>
 8002768:	f000 f822 	bl	80027b0 <_init>
 800276c:	2600      	movs	r6, #0
 800276e:	4d0a      	ldr	r5, [pc, #40]	; (8002798 <__libc_init_array+0x40>)
 8002770:	4c0a      	ldr	r4, [pc, #40]	; (800279c <__libc_init_array+0x44>)
 8002772:	1b64      	subs	r4, r4, r5
 8002774:	10a4      	asrs	r4, r4, #2
 8002776:	42a6      	cmp	r6, r4
 8002778:	d105      	bne.n	8002786 <__libc_init_array+0x2e>
 800277a:	bd70      	pop	{r4, r5, r6, pc}
 800277c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002780:	4798      	blx	r3
 8002782:	3601      	adds	r6, #1
 8002784:	e7ee      	b.n	8002764 <__libc_init_array+0xc>
 8002786:	f855 3b04 	ldr.w	r3, [r5], #4
 800278a:	4798      	blx	r3
 800278c:	3601      	adds	r6, #1
 800278e:	e7f2      	b.n	8002776 <__libc_init_array+0x1e>
 8002790:	080027e8 	.word	0x080027e8
 8002794:	080027e8 	.word	0x080027e8
 8002798:	080027e8 	.word	0x080027e8
 800279c:	080027ec 	.word	0x080027ec

080027a0 <memset>:
 80027a0:	4603      	mov	r3, r0
 80027a2:	4402      	add	r2, r0
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d100      	bne.n	80027aa <memset+0xa>
 80027a8:	4770      	bx	lr
 80027aa:	f803 1b01 	strb.w	r1, [r3], #1
 80027ae:	e7f9      	b.n	80027a4 <memset+0x4>

080027b0 <_init>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr

080027bc <_fini>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr
